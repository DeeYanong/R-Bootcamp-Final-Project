---
title: "Final Project - DnD Challenge Rating"
author: "Dee Yanong"
format: html
results: hide
editor: visual
execute: 
  echo: false
  message: false
  warning: false
---

```{r}
# Install/load Packages

#install.packages("pacman") #Pacman package will load and auto-install (if missing) packages in one line

pacman::p_load(gtsummary, skimr, dplyr, readr, tidyverse, ggplot2, broom, data.table, stringr)
```


The Dungeons & Dragons dataset, imported from Kaggle, contains comprehensive information on character classes and races, equipment, monsters, and spells. For this project, I focus specifically on the monster dataset to explore which monster characteristics best predict challenge rating (CR), a measure of a monster's overall difficulty.

```{r}


# Import D&D Dataset from Kaggle. Download the zip file: (https://www.kaggle.com/datasets/shadowtime2000/dungeons-dragons?resource=download)

#DnD <- unzip("C:/Users/deeya/OneDrive/Desktop/EMORY MPH/Thesis/R Bootcamp/R Bootcamp Final Project/DnD_Dataset.zip")

#classes <- read.csv("classes.csv")
#equipment <- read.csv("equipment.csv")
monsters <- read.csv(here::here("data","monsters.csv"))
#races <- read.csv("races.csv")
#spells <- read.csv("spells.csv")

```


```{r}
# Table 1 - use monsters dataset
#- Explore dataset, then create Table 1. 
#- Variables I want: size, type, armor_class, hit_points, hit_dice, strength, dexterity, constitution, intelligence, wisdom, charisma
#- Check for normality: armor_class, charisma, constitution, dexterity, hit_points, intelligence, strength, wisdom
	#- if bell-shaped use: ANOVA (aov)
	#- if skewed use: Kruskal-Wallis (kruskal.test)
#- Clean up data

#skimr::skim(monsters) #quick overview of my dataset

invisible(lapply(names(monsters[c("armor_class","charisma","constitution","dexterity","hit_points","intelligence","strength","wisdom","challenge_rating")]), function(var){
	hist(monsters[[var]],
			 main = paste("Histogram of", var),
			 xlab = var,
			 col = "lightgreen",
			 border = "white")
}))

monster_clean <- monsters %>%
	mutate (dice_group = case_when(str_detect(hit_dice, "d6$") ~ "d6",
																 str_detect(hit_dice, "d8$") ~ "d8",
																 str_detect(hit_dice, "d10$") ~ "d10",
																 str_detect(hit_dice, "d12$") ~ "d12",
																 str_detect(hit_dice, "d20$") ~ "d20",
																 TRUE ~ "other"),
					armor_class = as.numeric(armor_class),
					charisma = as.numeric(charisma),
					constitution = as.numeric(constitution),
					dexterity = as.numeric(dexterity),
					hit_points = as.numeric(hit_points),
					intelligence = as.numeric(intelligence),
					strength = as.numeric(strength),
					wisdom = as.numeric(wisdom),
					challenge_rating = as.numeric(challenge_rating)) %>%
	select(size,type,armor_class,hit_points,dice_group,strength,dexterity,constitution,intelligence,wisdom,charisma,challenge_rating)
```

```{r}
#| label: tbl-one
#| tbl-cap: "Data summary stratified by size"
monster_clean %>%
tbl_summary(by = size,
						include = c(type,armor_class,hit_points,dice_group,strength,dexterity,constitution,intelligence,wisdom,charisma,challenge_rating),
						label = list(type ~ "Class Type",
												 armor_class ~ "Armor Class",
												 hit_points ~ "Hit Points",
												 dice_group ~ "Hit Dice",
												 strength ~ "Strength",
												 dexterity ~ "Dexterity",
												 constitution ~ "Constitution",
												 intelligence ~ "Intelligence",
												 wisdom ~ "Wisdom",
												 charisma ~ "Charisma",
												 challenge_rating ~ "Challenge Rating")) %>%
	add_p(test = list(all_continuous() ~ "kruskal.test",
										all_categorical() ~ "chisq.test"),
				test.args = all_categorical() ~ list(simulate.p.value = TRUE)) %>%
	bold_labels()

armor <- list(n = nrow(monster_clean),
							mean_armor = mean(monster_clean$armor_class, na.rm = TRUE))
hp <- list(n = nrow(monster_clean),
					 mean_hp = mean(monster_clean$hit_points, na.rm = TRUE))
	
```
@tbl-one shows the descriptive statistics.There were `r armor$n` participants with a mean armor class of `r armor$mean_armor`. There were `r hp$n` participants with a mean HP of `r hp$mean_hp`.

## Regression
```{r}
linear_model <- lm(challenge_rating ~ armor_class + hit_points + constitution + strength, data = monster_clean)

tbl_regression(linear_model,intercept = TRUE,
							 label = list(armor_class ~ "Armor Class",
							 						 hit_points ~ "Hit Points",
							 						 constitution ~ "Constitution",
							 						 strength ~ "Strength"))
```
## Figures

```{r}
#| label: fig-one
ggplot(monster_clean, aes(x = armor_class, y = challenge_rating)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", color = "red") +
  theme_minimal() +
  labs(title = "Relationship Between Armor Class and Challenge Rating", 
       x = "Armor Class", y = "Challenge Rating")
ggsave(here::here("data","fig_one.png"), device = "png")
```

```{r}
#| label: fig-two

ggplot(monster_clean, aes(x = hit_points, y = challenge_rating)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", color = "red") +
  theme_minimal() +
  labs(title = "Relationship Between Hit Points and Challenge Rating", 
       x = "Hit Points", y = "Challenge Rating")
```

```{r}
#| label: fig-three

ggplot(monster_clean, aes(x = constitution, y = challenge_rating)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", color = "red") +
  theme_minimal() +
  labs(title = "Relationship Between Constitution and Challenge Rating", 
       x = "Constitution", y = "Challenge Rating")
```

```{r}
#| label: fig-four

ggplot(monster_clean, aes(x = strength, y = challenge_rating)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", color = "red") +
  theme_minimal() +
  labs(title = "Relationship Between Strength and Challenge Rating", 
       x = "Strength", y = "Challenge Rating")
```

@fig-one, @fig-two, @fig-three, @fig-four shows the relationship between challenge rating and armor class, hit points, constitution, strength.

## Calculate Average HP based on Constitution modifier and Hit dice

Average HP = (Hit dice total or average) + (Constitution modifier * number of it dice)

```{r}
# Calculate Average HP based on Constitution modifier and Hit dice
avg_hp <- function(num_dice, die_size, constitution = 0) {
	avg_die <- (1 + die_size)/2 #avg of rolling 1 die; die_size is the number of sides
	base_avg <- (num_dice*avg_die) #multiply number of dice rolls with avg_die
	con_mod <- ((constitution/10)-2) #constitution modifier
	con_bonus <- (num_dice*con_mod)
	total_avg <- (base_avg + con_bonus)
	return(total_avg)
}

#Test calculate average HP here:
avg_hp(3,10,constitution = 10)
```
